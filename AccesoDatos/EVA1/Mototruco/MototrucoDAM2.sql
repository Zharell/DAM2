DROP TABLE TEMP;

CREATE TABLE TEMP (
ARTICULO NUMBER(5),
MENSAJE VARCHAR2(15)
);

DECLARE

	V_PEDIDO NUMBER:=&PEDIDO;
	V_STOCK NUMBER:=0;
	
BEGIN

	SELECT STOCK INTO V_STOCK FROM ARTICULOS WHERE IDART=V_PEDIDO;
	
	IF (V_STOCK>0) THEN
		INSERT INTO TEMP VALUES (V_PEDIDO,'VENDIDO');
		UPDATE ARTICULOS SET STOCK=STOCK-1 
		WHERE IDART=V_PEDIDO;
		DBMS_OUTPUT.PUT_LINE('Se ha vendido correctamente');
	ELSE 
		DBMS_OUTPUT.PUT_LINE('No hay existencias del producto');
		INSERT INTO TEMP VALUES (V_PEDIDO,'No hay stock');
	END IF;
	
END;
/

SELECT * FROM TEMP;

--Ejercicio 1a
CREATE OR REPLACE TYPE DIRECCION1 AS OBJECT (
CALLE VARCHAR2(20),
CIUDAD VARCHAR2(10),
CODIGO_POST NUMBER(5)
);
/

CREATE OR REPLACE TYPE PERSONA AS OBJECT (
CODIGO NUMBER,
NOMBRE VARCHAR2(10),
DIREC DIRECCION1,
FECHA_NAC DATE
);
/

DECLARE
DIR DIRECCION1:=DIRECCION1(NULL,NULL,NULL);
P PERSONA := PERSONA(NULL,NULL,NULL,NULL);
BEGIN
DIR.CALLE:= 'LA MINA';
DIR.CIUDAD := 'GUADALAJARA';
DIR.CODIGO_POST := '19001';
P.CODIGO := 1;
P.NOMBRE := 'JUAN';
P.DIREC := DIR;
P.FECHA_NAC := '10/11/1988';
END;
/

DROP TABLE ALUMNOS CASCADE CONSTRAINTS;

CREATE TABLE ALUMNOS OF PERSONA(CODIGO PRIMARY KEY);

INSERT INTO ALUMNOS VALUES (1,'El menol klk', DIRECCION1('CALLE RD','SANTO DOMINGO',28030),'10/10/1990');
INSERT INTO ALUMNOS VALUES (2,'Federico', DIRECCION1('Alto San Isidro','GUADALAJARA',28830),'10/10/1980');

SELECT * FROM ALUMNOS;

SELECT * FROM ALUMNOS C WHERE C.DIREC.CIUDAD='GUADALAJARA';
SELECT CODIGO,DIREC FROM ALUMNOS;
UPDATE ALUMNOS C SET C.DIREC.CIUDAD = 'guadalajara' WHERE C.DIREC.CIUDAD='GUADALAJARA';

DECLARE	
	CURSOR C1 IS SELECT NOMBRE,C.DIREC.CIUDAD FROM ALUMNOS C;
	V_NOMBRE VARCHAR2(15);
	V_CALLE VARCHAR2(15);
BEGIN
	OPEN C1;
	FETCH C1 INTO V_NOMBRE,V_CALLE;
	
	WHILE C1%FOUND LOOP 
	
	DBMS_OUTPUT.PUT_LINE('Alumno: '||V_NOMBRE||' - Calle: '||V_CALLE);
	
	FETCH C1 INTO V_NOMBRE,V_CALLE;
	END LOOP;
END;
/
DELETE FROM ALUMNOS C WHERE C.DIREC.CIUDAD='guadalajara';

--Ejercicio 1b

CREATE OR REPLACE TYPE VETERINARIO AS OBJECT (
ID INTEGER,
NOMBRE VARCHAR2(100),
DIRECCION VARCHAR2(255)
);
/

CREATE OR REPLACE TYPE MASCOTA AS OBJECT (
ID INTEGER,
RAZA VARCHAR2(100),
NOMBRE VARCHAR2(100),
VET REF VETERINARIO
);
/

DROP TABLE MASCOTAS;
DROP TABLE VETERINARIOS;

CREATE TABLE VETERINARIOS OF VETERINARIO;
INSERT INTO VETERINARIOS VALUES(1,'Jesus perez','Calle el Mareo, 29');

CREATE TABLE MASCOTAS OF MASCOTA;
INSERT INTO MASCOTAS VALUES(1,'Perro','Sprocjet',(SELECT REF(V) FROM VETERINARIOS V WHERE V.ID=1));

SELECT * FROM MASCOTAS;
SELECT ID, NOMBRE, DEREF(VET) FROM MASCOTAS;
SELECT NOMBRE,RAZA,DEREF(M.VET).NOMBRE FROM MASCOTAS M;

DROP TABLE MASCOTAS;
DROP TABLE VETERINARIOS;
DROP TYPE MASCOTA;
DROP TYPE VETERINARIO;

--Ejercicio 2

SELECT * FROM PEDIDOS;
SELECT * FROM DETALLE;
SELECT * FROM ARTICULOS;
DROP TABLE TEMP;

CREATE TABLE TEMP (
ARTICULO NUMBER(5),
MENSAJE VARCHAR2(15)
);

DECLARE

	V_ARTICULO NUMBER:=&ARTICULO;
	V_STOCK NUMBER:=0;
	V_CLIENTE NUMBER:=&CLIENTE;
	CONT NUMBER:=8;
	
BEGIN
	WHILE (CONT<16) LOOP
		SELECT STOCK INTO V_STOCK FROM ARTICULOS WHERE IDART=V_ARTICULO;			
		IF (V_STOCK>0) THEN
			INSERT INTO TEMP VALUES (V_ARTICULO,'VENDIDO');
			UPDATE ARTICULOS SET STOCK=STOCK-1 
			WHERE IDART=V_ARTICULO;
			DBMS_OUTPUT.PUT_LINE('Se ha vendido correctamente');
			INSERT INTO PEDIDOS VALUES (CONT,V_CLIENTE,SYSDATE,SYSDATE);
			INSERT INTO DETALLE VALUES (CONT,V_ARTICULO,1);
		ELSE 
			DBMS_OUTPUT.PUT_LINE('No hay existencias del producto');
			INSERT INTO TEMP VALUES (V_ARTICULO,'No hay stock');
			INSERT INTO PEDIDOS VALUES (CONT,V_CLIENTE,SYSDATE,SYSDATE);
			INSERT INTO DETALLE VALUES (CONT,V_ARTICULO,0);
		END IF;	
		CONT:=CONT+1;
	END LOOP;	
END;
/

SELECT * FROM PEDIDOS;
SELECT * FROM DETALLE;
SELECT * FROM ARTICULOS;

--Ejercicio 3

DROP TABLE TRIANGULOS ON CASCADE CONSTRAINTS;
CLEAR SCR;
CREATE OR REPLACE TYPE TIPO_TRIANGULO AS OBJECT (
BASE NUMBER,
ALTURA NUMBER,
MEMBER FUNCTION AREA RETURN NUMBER
);
/

CREATE OR REPLACE TYPE BODY TIPO_TRIANGULO AS 
MEMBER FUNCTION AREA RETURN NUMBER IS
A NUMBER;
BEGIN
A := (BASE*ALTURA)/2;
RETURN A;
	END;
END;
/

CREATE TABLE TRIANGULOS (ID NUMBER,TRIANGULO TIPO_TRIANGULO);
INSERT INTO TRIANGULOS VALUES (1,TIPO_TRIANGULO(5,6));
INSERT INTO TRIANGULOS VALUES (2,TIPO_TRIANGULO(10,10));
SELECT * FROM TRIANGULOS;

DECLARE
T TIPO_TRIANGULO;
BEGIN
	
	FOR I IN (SELECT * FROM TRIANGULOS) LOOP
		T := I.TRIANGULO;
		DBMS_OUTPUT.PUT_LINE('EL TRIANGULO CON ID: '||I.ID);
		DBMS_OUTPUT.PUT_LINE('CON BASE: '||T.BASE);
		DBMS_OUTPUT.PUT_LINE('Y ALTURA '||T.ALTURA);
		DBMS_OUTPUT.PUT_LINE('TIENE UN AREA DE: '||T.AREA);
	END LOOP;
END;
/

-- Ejercicio 4

--Se requiere poner todo y en orden ALTER
ALTER TYPE TIPO_CUBO REPLACE AS OBJECT (
LARGO INTEGER,
ANCHO INTEGER,
ALTO INTEGER,
MEMBER FUNCTION SUPERFICIE RETURN INTEGER,
MEMBER FUNCTION VOLUMEN RETURN INTEGER,
MEMBER PROCEDURE MOSTRAR,
STATIC PROCEDURE NUEVOCUBO(
	V_LARGO INTEGER,
	V_ANCHO INTEGER,
	V_ALTO INTEGER
	)
);
/

--Métodos

CREATE OR REPLACE TYPE BODY TIPO_CUBO AS
MEMBER FUNCTION SUPERFICIE RETURN INTEGER IS 
BEGIN
	RETURN 2*(LARGO*ANCHO+LARGO*ALTO+ANCHO*ALTO);
END;
--OJO
MEMBER FUNCTION VOLUMEN RETURN INTEGER IS
BEGIN
	RETURN LARGO*ANCHO*ALTO;
END;


MEMBER PROCEDURE MOSTRAR IS 
BEGIN
	DBMS_OUTPUT.PUT_LINE('LARGO: '||'- ' ||LARGO||' ANCHO: '||ANCHO||' - '||'ALTO: '||ALTO);
	DBMS_OUTPUT.PUT_LINE('VOLUMEN: '||VOLUMEN||' SUPERFICIE '||SUPERFICIE);
	END;

--Se requiere poner 2 veces los atributos
STATIC PROCEDURE NUEVOCUBO(
	V_LARGO INTEGER,
	V_ANCHO INTEGER,
	V_ALTO INTEGER
	)
IS
BEGIN
INSERT INTO CUBOS VALUES(
	V_LARGO,
	V_ANCHO,
	V_ALTO
	);
	END;
END;
/

BEGIN
	TIPO_CUBO.NUEVOCUBO(1,8,1);

END;
/

--Ejercicio 5

CLEAR SCR;
CREATE OR REPLACE TYPE EMPLEADO AS OBJECT (
RUT VARCHAR2(10),
NOMBRE VARCHAR(10),
CARGO VARCHAR(9),
FECHAING DATE,
SUELDO NUMBER(9),
COMISION NUMBER(9),
ANTICIPO NUMBER(9),
MEMBER FUNCTION SUELDO_LIQUIDO RETURN NUMBER,
MEMBER PROCEDURE AUMENTO_SUELDO(AUMENTO NUMBER),
MEMBER PROCEDURE SETANTICIPO(ANTICIPO NUMBER)
);
/
CREATE OR REPLACE TYPE BODY EMPLEADO AS

MEMBER FUNCTION SUELDO_LIQUIDO RETURN NUMBER IS
	BEGIN
	RETURN(SUELDO+COMISION) - ANTICIPO;
	END;

MEMBER PROCEDURE AUMENTO_SUELDO(AUMENTO NUMBER) IS
	BEGIN
	SUELDO := SUELDO + AUMENTO;
	END;

MEMBER PROCEDURE SETANTICIPO(ANTICIPO NUMBER) IS
	BEGIN
	SELF.ANTICIPO:=ANTICIPO;
	END;
END;
/

DROP TABLE EMPLEADOS;
CREATE TABLE EMPLEADOS OF EMPLEADO;
INSERT INTO EMPLEADOS VALUES ('1','JUANA','COMERCIAL',SYSDATE,1000,800,0);
INSERT INTO EMPLEADOS VALUES ('2','PEPA','DIRECTORA',SYSDATE,2000,500,0);
INSERT INTO EMPLEADOS VALUES ('3','ROSA','COMERCIAL',SYSDATE,1000,1000,0);

DECLARE 
	EMPL EMPLEADO;
BEGIN
	SELECT VALUE(E) INTO EMPL FROM EMPLEADOS E WHERE E.RUT='1';
	DBMS_OUTPUT.PUT_LINE('NOMBRE: '||EMPL.NOMBRE||' - CARGO: '||EMPL.CARGO||' - SUELDO: '||EMPL.SUELDO||' - SUELDO LIQUIDO: '||EMPL.SUELDO_LIQUIDO);
	EMPL.AUMENTO_SUELDO(400);
	DBMS_OUTPUT.PUT_LINE('--- TRAS EL AUMENTO ---');
	DBMS_OUTPUT.PUT_LINE('NOMBRE: '||EMPL.NOMBRE||' - CARGO: '||EMPL.CARGO||' - SUELDO: '||EMPL.SUELDO||' - SUELDO LIQUIDO: '||EMPL.SUELDO_LIQUIDO);
END;
/

--Ejercicio 6

CLEAR SCR;
CREATE OR REPLACE TYPE COLEC_HIJOS AS VARRAY(10) OF VARCHAR(30);
/
DROP TABLE EMP6;
CREATE TABLE EMP6 (
IDEMP NUMBER,
NOMBRE VARCHAR(30),
APELLIDO VARCHAR(30),
HIJOS COLEC_HIJOS
);
/
INSERT INTO EMP6 VALUES (1,'FRANCISCO','ELPEPE',COLEC_HIJOS('LUIS','URSULA'));
INSERT INTO EMP6 VALUES (2,'ESPERANZA','GOMEZ',COLEC_HIJOS('JOSE','CARLOS','PEDRO','EDUARDO','SERGIO'));
SELECT E.HIJOS FROM EMP6 E WHERE IDEMP=1;
SELECT E.HIJOS FROM EMP6 E;
DECLARE
V_HIJOS COLEC_HIJOS;
CUENTA NUMBER;
BEGIN
	SELECT E.HIJOS INTO V_HIJOS FROM EMP6 E WHERE E.IDEMP=1;
	CUENTA := V_HIJOS.COUNT;
	DBMS_OUTPUT.PUT_LINE('Total hijos: '||CUENTA);
END;
/
DECLARE
	CURSOR C1 IS SELECT * FROM EMP6;
	V_ID NUMBER;
	V_NOMBRE VARCHAR(30);
	V_APELLIDO VARCHAR(30);
	V_HIJOS COLEC_HIJOS;
BEGIN
	OPEN C1;
	DBMS_OUTPUT.PUT_LINE('SE PROCEDE A NOMBRAR A LOS HIJOS POR EMPLEADO');
	DBMS_OUTPUT.PUT_LINE(' - - - -');
	LOOP
		FETCH C1 INTO V_ID,V_NOMBRE,V_APELLIDO,V_HIJOS;
		EXIT WHEN C1%NOTFOUND;
		DBMS_OUTPUT.PUT_LINE('ID: '||V_ID||' - NOMBRE: '||V_NOMBRE||' - APELLIDO: '||V_APELLIDO);
		FOR I IN V_HIJOS.FIRST .. V_HIJOS.LAST LOOP
			DBMS_OUTPUT.PUT_LINE('EL HIJO: '||I||' - SE LLAMA: '||V_HIJOS(I));
		END LOOP;		
	END LOOP;
END;
/
DECLARE
	CURSOR C1 IS SELECT * FROM EMP6;
	V_ID NUMBER;
	V_NOMBRE VARCHAR(30);
	V_APELLIDO VARCHAR(30);
	V_HIJOS COLEC_HIJOS;
	CUENTA NUMBER;
BEGIN
	OPEN C1;
	DBMS_OUTPUT.PUT_LINE('SE PROCEDE A CONTAR EL NÚMERO DE HIJOS POR EMPLEADO');
	DBMS_OUTPUT.PUT_LINE(' - - - -');
	LOOP
		FETCH C1 INTO V_ID,V_NOMBRE,V_APELLIDO,V_HIJOS;
		EXIT WHEN C1%NOTFOUND;
		DBMS_OUTPUT.PUT_LINE('ID: '||V_ID||' - NOMBRE: '||V_NOMBRE||' - APELLIDO: '||V_APELLIDO);
		CUENTA := V_HIJOS.COUNT;
		DBMS_OUTPUT.PUT_LINE('Total hijos: '||CUENTA);
	END LOOP;
	CLOSE C1;
END;
/
DECLARE
	HIJO COLEC_HIJOS;
BEGIN
	SELECT HIJOS INTO HIJO FROM EMP6 WHERE IDEMP=1;
	FOR I IN HIJO.FIRST .. HIJO.LAST LOOP
		DBMS_OUTPUT.PUT_LINE('EL HIJO: '||I||' - SE LLAMA: '||HIJO(I));
	END LOOP;
	HIJO.EXTEND;
	HIJO(HIJO.LAST) := 'ANTONIO';
	DBMS_OUTPUT.PUT_LINE('HIJOS DESPUES DE AÑADIR');
	DBMS_OUTPUT.PUT_LINE(' - - - -');
	FOR I IN HIJO.FIRST .. HIJO.LAST LOOP
		DBMS_OUTPUT.PUT_LINE('EL HIJO: '||I||' - SE LLAMA: '||HIJO(I));
	END LOOP;
	DBMS_OUTPUT.PUT_LINE('HIJOS DESPUES DE AÑADIR SOLO CON EXTEND');
	DBMS_OUTPUT.PUT_LINE(' - - - -');
	HIJO.EXTEND;
	FOR I IN HIJO.FIRST .. HIJO.LAST LOOP
		DBMS_OUTPUT.PUT_LINE('EL HIJO: '||I||' - SE LLAMA: '||HIJO(I));
	END LOOP;
END;
/

DECLARE
	V_HIJOS COLEC_HIJOS;
	I NUMBER;
	J NUMBER;
	CUENTA NUMBER;
BEGIN
	SELECT HIJOS INTO V_HIJOS FROM EMP6 E WHERE E.IDEMP=1;
	DBMS_OUTPUT.PUT_LINE('HIJOS ANTES DE EXTEND AVANZADO');
	DBMS_OUTPUT.PUT_LINE(' - - - -');	
	FOR I IN V_HIJOS.FIRST .. V_HIJOS.LAST LOOP
		DBMS_OUTPUT.PUT_LINE('EL HIJO: '||I||' SE LLAMA: '||V_HIJOS(I));
	END LOOP;
	DBMS_OUTPUT.PUT_LINE(' - - - -');	
	DBMS_OUTPUT.PUT_LINE('HIJOS DESPUES DE EXTEND AVANZADO');
	DBMS_OUTPUT.PUT_LINE(' - - - -');
	V_HIJOS.EXTEND(3,1);
	FOR I IN V_HIJOS.FIRST .. V_HIJOS.LAST LOOP
		DBMS_OUTPUT.PUT_LINE('EL HIJO: '||I||' SE LLAMA: '||V_HIJOS(I));
	END LOOP;
END;
/

DROP TABLE EMP6_HIJOS;
CREATE TABLE EMP6_HIJOS(
IDEMP NUMBER PRIMARY KEY,
NOMBRE VARCHAR(30),
APELLIDOS VARCHAR(30),
HIJO COLEC_HIJOS
);

INSERT INTO EMP6_HIJOS VALUES (1,'ELPEPE','GUCHULUACO',COLEC_HIJOS('JUAN','PEDRO','ELKK'));
DECLARE
	I COLEC_HIJOS;
BEGIN
	SELECT HIJO INTO I FROM EMP6_HIJOS WHERE IDEMP=1;	
	I.EXTEND;
	I(I.LAST) := 'ANTONIO';
	UPDATE EMP6_HIJOS SET HIJO = I WHERE IDEMP=1;
END;
/
SELECT * FROM USER_VARRAYS;
DESC COLEC_HIJOS;

-- Ejercicio 7

CLEAR SCR;
CREATE TYPE TIPO_NOMBRES_DEP IS VARRAY(7) OF VARCHAR(30);
/
DROP TABLE DEPARTAMENTOS;
CREATE TABLE DEPARTAMENTOS (
REGION VARCHAR(25),
NOMBRES_DEP TIPO_NOMBRES_DEP
);
/
--Insertar valores en la tabla
INSERT INTO DEPARTAMENTOS VALUES ('EUROPA',TIPO_NOMBRES_DEP('SHIPPING','SALES','FINANCES'));
INSERT INTO DEPARTAMENTOS VALUES ('AMERICA',TIPO_NOMBRES_DEP('SALES','FINANCES','SHIPPING'));
INSERT INTO DEPARTAMENTOS VALUES ('ASIA',TIPO_NOMBRES_DEP('SHIPPING','FINANCES','SALES','PAYROLL'));
SELECT * FROM DEPARTAMENTOS;

DECLARE

	V_NOMBRES TIPO_NOMBRES_DEP := TIPO_NOMBRES_DEP('BENEFITS','ADVERTISING','CONTRACTING','EXECUTIVE','MARKETING');
	V_NOMBRES2 TIPO_NOMBRES_DEP;

BEGIN
	UPDATE DEPARTAMENTOS SET NOMBRES_DEP = V_NOMBRES WHERE REGION='EUROPA';
	SELECT NOMBRES_DEP INTO V_NOMBRES2 FROM DEPARTAMENTOS WHERE REGION='EUROPA';
	
	FOR I IN V_NOMBRES2.FIRST .. V_NOMBRES2.LAST LOOP
		DBMS_OUTPUT.PUT_LINE('DEPARTAMENTOS: '||V_NOMBRES2(I));
	END LOOP;
END;
/

DECLARE

	CURSOR C1 IS SELECT * FROM DEPARTAMENTOS;
	V_REGION VARCHAR(25);
	V_NOMBRES TIPO_NOMBRES_DEP;
BEGIN
	
	OPEN C1;
	LOOP
	FETCH C1 INTO V_REGION,V_NOMBRES;
		EXIT WHEN C1%NOTFOUND;
		FOR I IN V_NOMBRES.FIRST .. V_NOMBRES.LAST LOOP
			DBMS_OUTPUT.PUT_LINE('DEPARTAMENTO: '||'('||I||')'||V_NOMBRES(I));
		END LOOP;
	END LOOP;
END;
/

DECLARE 

	CURSOR C2 IS SELECT * FROM DEPARTAMENTOS;

BEGIN

	DBMS_OUTPUT.PUT_LINE('SE PROCEDE A MOSTRAR CON 2 FOR ');
	DBMS_OUTPUT.PUT_LINE(' ------------------------------------------- ');
	FOR I IN C2 LOOP
		DBMS_OUTPUT.PUT_LINE('REGION: '||I.REGION);
		FOR J IN I.NOMBRES_DEP.FIRST .. I.NOMBRES_DEP.LAST LOOP
			DBMS_OUTPUT.PUT_LINE('DEPARTAMENTO: '||'('||J||')'||I.NOMBRES_DEP(J));
		END LOOP;
	END LOOP;

END;
/

--Ejercicio 8a

CLEAR SCR;
DROP TABLE EJEMPLO_TABLA_ANIDADA;
DROP TYPE TABLA_ANIDADA;
CREATE OR REPLACE TYPE TABLA_ANIDADA AS TABLE OF DIRECCION1;
/

CREATE TABLE EJEMPLO_TABLA_ANIDADA (
ID NUMBER(2),
APELLIDO VARCHAR2(35),
DIREC TABLA_ANIDADA) NESTED TABLE DIREC STORE AS DIREC_ANIDADA;

INSERT INTO EJEMPLO_TABLA_ANIDADA VALUES (1,'RAMOS',TABLA_ANIDADA(
					DIRECCION1('SANTO DOMINGO','MADRID',28028),
					DIRECCION1('INVENTADA','BARCELONA',28888),
					DIRECCION1('LAQUETUQUIERAS','MURCIA',25588),
					DIRECCION1('TREMENDA','ALICANTE',28228)
					));

INSERT INTO EJEMPLO_TABLA_ANIDADA VALUES (2,'ALBERTO',TABLA_ANIDADA(
					DIRECCION1('AYAYAY','CEUTA',28026),
					DIRECCION1('DELOCOS','MELILLA',28888)
					));

--FILTRAR SELECTS DE TABLAS ANIDADAS
SELECT E.DIREC FROM EJEMPLO_TABLA_ANIDADA E WHERE E.ID=1;
SELECT OPE.CALLE FROM EJEMPLO_TABLA_ANIDADA E, TABLE(E.DIREC) OPE WHERE E.ID=1;
--UPDATE EN TABLAS ANIDADAS
UPDATE TABLE(SELECT DIREC FROM EJEMPLO_TABLA_ANIDADA WHERE ID=1) ALIAS SET VALUE(ALIAS) = DIRECCION1('CALLE PINZON 13','TOLEDO',45555) WHERE VALUE(ALIAS)=DIRECCION1('TREMENDA','ALICANTE',28228);

SELECT OPE.CALLE FROM EJEMPLO_TABLA_ANIDADA E, TABLE(E.DIREC) OPE WHERE E.ID=1;
--INSERTAR EN TABLAS ANIDADAS
INSERT INTO TABLE(SELECT E.DIREC FROM EJEMPLO_TABLA_ANIDADA E WHERE ID=1) VALUES (DIRECCION1('CALLE INSERTADA','MADRID',20020));
SELECT OPE.CALLE FROM EJEMPLO_TABLA_ANIDADA E, TABLE(E.DIREC) OPE WHERE E.ID=1;
--UPDATE EN VARIAS CIUDADES
UPDATE EJEMPLO_TABLA_ANIDADA SET DIREC=TABLA_ANIDADA(
					DIRECCION1('CALLE UPDATE1','MADRID',28223),
					DIRECCION1('CALLE UPDATE2','MOSTOLES',28223),
					DIRECCION1('CALLE UPDATE3','MURCIA',28223)
) WHERE ID=1;
SELECT OPE.CALLE FROM EJEMPLO_TABLA_ANIDADA E, TABLE(E.DIREC) OPE WHERE E.ID=1;
--BORRADO TUPLA
DELETE FROM TABLE(SELECT E.DIREC FROM EJEMPLO_TABLA_ANIDADA E WHERE ID=1) ALIAS WHERE VALUE(ALIAS) = DIRECCION1('CALLE UPDATE1','MADRID',28223);
SELECT OPE.CALLE FROM EJEMPLO_TABLA_ANIDADA E, TABLE(E.DIREC) OPE WHERE E.ID=1;

--SELECTS FILTRADOS
SELECT CALLE,CIUDAD FROM THE(SELECT E.DIREC FROM EJEMPLO_TABLA_ANIDADA E WHERE ID=1) WHERE CIUDAD = 'MOSTOLES';
SELECT DIR.CALLE FROM EJEMPLO_TABLA_ANIDADA E, TABLE(E.DIREC) DIR WHERE E.ID=1 AND DIR.CIUDAD='MOSTOLES';

--PROCEDIMIENTO
CREATE OR REPLACE PROCEDURE VER_DIREC(IDENT NUMBER)
AS
	CURSOR C1 IS SELECT CALLE FROM THE(SELECT E.DIREC FROM EJEMPLO_TABLA_ANIDADA E WHERE ID=IDENT);
BEGIN
	FOR I IN C1 LOOP
		DBMS_OUTPUT.PUT_LINE(I.CALLE);
	END LOOP;
END;
/

DECLARE
BEGIN
	DBMS_OUTPUT.PUT_LINE('BLoque PL para usar el procedimiento');
	DBMS_OUTPUT.PUT_LINE('---------------------------------------');
	VER_DIREC(1);
END;
/


--Ejercicio 8b

CLEAR SCR;
DROP TABLE STAFF;
DROP TYPE TABLA_HIJOS;

CREATE TYPE TABLA_HIJOS AS TABLE OF VARCHAR(30);
/

CREATE TABLE STAFF (
ID NUMBER,
NOMBRE VARCHAR(30),
APELLIDOS VARCHAR(30),
HIJOS TABLA_HIJOS)
NESTED TABLE HIJOS STORE AS T_HIJOS;


SELECT OBJECT_NAME,OBJECT_TYPE STATUS FROM ALL_OBJECTS WHERE OBJECT_NAME LIKE '%HIJO%';

SELECT SEGMENT_NAME, SEGMENT_TYPE FROM USER_SEGMENTS WHERE SEGMENT_NAME LIKE '%HIJO%';

INSERT INTO STAFF VALUES(1,'FERNANDO','MORENO',TABLA_HIJOS('ELENA','PABLO'));

INSERT INTO STAFF VALUES(2,'DAVID','SANCHEZ',TABLA_HIJOS('CARMEN','CANDELA'));

SELECT * FROM THE(SELECT S.HIJOS FROM STAFF S WHERE S.ID=1);

UPDATE STAFF SET HIJOS=TABLA_HIJOS('CARMEN','CANDELA','CAYETANA') WHERE ID=1;

SELECT ST.* FROM STAFF S, TABLE(S.HIJOS) ST WHERE S.ID=1 OR S.ID=2;


--Ejercicio 9

-- Se crea la función y esta devuelve el salario + la comisión
--multiplicado por 14 (12 meses + 2 de pagas extras)
CREATE OR REPLACE FUNCTION QUECHAVAL
(V_EMP EMP.EMPNO%TYPE)
RETURN NUMBER
AS
	V_SAL EMP.SAL%TYPE;
	V_COMM EMP.COMM%TYPE;
	
BEGIN

	SELECT SAL,NVL(COMM,0) INTO V_SAL,V_COMM FROM EMP
	WHERE EMPNO=V_EMP; 
	
	RETURN (V_SAL+V_COMM)*14;

END QUECHAVAL;
/
--Se obtiene el resultado y se muestra en pantalla
--Se hace una excepción para empleados inexistentes
DECLARE

	V_VAR NUMBER;
	V_EMP NUMBER:=&EMPLEADO;
	
BEGIN

	V_VAR:=QUECHAVAL(V_EMP);
	DBMS_OUTPUT.PUT_LINE('El salario anual es el siguiente: '||V_VAR);
	
EXCEPTION WHEN OTHERS THEN
	DBMS_OUTPUT.PUT_LINE('NO EXISTE EL EMPLEADO');
END;
/

--Ejercicio 10

CLEAR SCR;




CREATE TYPE TIPO_ADDRESS AS OBJECT (
DIR VARCHAR(100),
CP NUMBER(5)
);
/

CREATE TYPE TIPO_CONTACTO AS OBJECT (
TELEFONO NUMBER,
EMAIL VARCHAR(100)
);
/

CREATE TYPE TIPO_PERSON AS OBJECT(
ID VARCHAR(20),
NOMBRE VARCHAR(30),
APELLIDO VARCHAR(30),
DIRECCION TIPO_ADDRESS,
CONTACTO TIPO_CONTACTO)
NOT FINAL
/

CREATE TYPE TIPO_CUSTOMER UNDER TIPO_PERSON 
(N_PEDIDOS NUMBER)
/

DESC TIPO_ADDRESS;

CREATE OR REPLACE TYPE TIPO_ARTICULO AS OBJECT (
IDART NUMBER,
NOMBRE VARCHAR(30),
DESCRIPCION VARCHAR(100),
PRECIO NUMBER,
PORCT_IVA NUMBER
);
/

CREATE TYPE TABLA_ARTICULOS AS TABLE OF TIPO_ARTICULO;
/

CREATE OR REPLACE TYPE TIPO_LISTA_DETALLE AS OBJECT (
NUMERO NUMBER,
ARTICULO TIPO_ARTICULO,
CANTIDAD NUMBER
)
/

CREATE TYPE TAB_LISTA_DETALLE AS TABLE OF TIPO_LISTA_DETALLE;
/

CREATE TYPE TIPO_LISTA_COMPRA AS OBJECT(
ID NUMBER,
FECHA DATE,
CLI REF TIPO_CUSTOMER,
DETALLE TAB_LISTA_DETALLE,
MEMBER FUNCTION TOTAL RETURN NUMBER
)
/
CREATE TYPE BODY TIPO_LISTA_COMPRA AS
MEMBER FUNCTION TOTAL RETURN NUMBER IS
	I INTEGER;
	TOT NUMBER:=0;
BEGIN
	FOR I IN 1..DETALLE.COUNT LOOP
		TOT:=TOT + (DETALLE(I).CANTIDAD *
		DETALLE(I).ARTICULO.PRECIO)*
		(1+(DETALLE(I).ARTICULO.PORCT_IVA/100));
	END LOOP;
	RETURN TOT;
	END;
END;
/

DROP TABLE CUSTOMERS;

CREATE TABLE CUSTOMERS OF TIPO_CUSTOMER;

INSERT INTO CUSTOMERS VALUES (1,'PEDRO','SUAREZ',TIPO_ADDRESS('PASEO DEL MUSEO, 15',28009),
						   TIPO_CONTACTO(938383838,'PSUAREZ@ONO.ES'),0);

INSERT INTO CUSTOMERS VALUES (2,'JUANA','GOMEZ',TIPO_ADDRESS('GRAN VIA, 15',28885),
						   TIPO_CONTACTO(938888888,'JGOMEZ@ONO.ES'),0);
DROP TABLE LISTAS_DE_COMPRAS;

CREATE TABLE LISTAS_DE_COMPRAS OF TIPO_LISTA_COMPRA
	NESTED TABLE DETALLE STORE AS TDETALLE;

--SELECT ATACA A LA TABLA LISTA COMPRA
INSERT INTO LISTAS_DE_COMPRAS SELECT 1, CURRENT_DATE, REF(C), TAB_LISTA_DETALLE(TIPO_LISTA_DETALLE(
				      1, TIPO_ARTICULO(1,'BARRA DE PAN','TIPO BAGUETTE',1,7),4),
				      TIPO_LISTA_DETALLE(2,TIPO_ARTICULO(2,'LONCHAS DE JAMON','TIPO DE 						IBERICO',6,7),4)) FROM CUSTOMERS C WHERE C.ID=1;

SELECT * FROM LISTAS_DE_COMPRAS;

SELECT ID, FECHA, DEREF(CLI), DETALLE FROM LISTAS_DE_COMPRAS;

SELECT ID, C.TOTAL() FROM LISTAS_DE_COMPRAS C;

